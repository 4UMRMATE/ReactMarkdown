{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","setOptions","breaks","renderer","Renderer","link","href","title","text","App","props","state","editorText","placeholder","markdown","editorMaximized","previewMaximized","handleChange","bind","handleClick","markupButtons","e","this","setState","target","value","output","targetBtn","className","clickHandler","id","onChange","React","Component","ToolBar","onClick","Preview","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAMAA,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAO,mCAA4BF,EAA5B,aAAqCE,GAAS,Q,IAGjDC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAYC,EACZC,SAAUD,EACVE,iBAAiB,EACjBC,kBAAkB,GAGpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAXJ,E,yDAcNG,GACXC,KAAKC,SAAS,CACZX,WAAYS,EAAEG,OAAOC,MACrBX,SAAUO,EAAEG,OAAOC,U,oCAITC,GACZ,OAAOJ,KAAKC,SAAS,CACnBX,WAAW,GAAD,OAAKU,KAAKX,MAAMC,YAAhB,OAA6Bc,GACvCZ,SAAS,GAAD,OAAKQ,KAAKX,MAAMC,YAAhB,OAA6Bc,O,kCAI7BL,GACV,IAAIM,EAAYN,EAAEG,OAAOI,UACP,eAAdD,EACFL,KAAKF,cAAc,aACI,iBAAdO,EACTL,KAAKF,cAAc,aACI,eAAdO,EACTL,KAAKF,cAAc,qBACI,qBAAdO,EACTL,KAAKF,cAAc,cACI,eAAdO,EACTL,KAAKF,cAAc,cACI,gBAAdO,EACTL,KAAKF,cAAc,wBACI,kBAAdO,EACTL,KAAKF,cAAc,mBACI,eAAdO,GACTL,KAAKF,cAAc,oB,+BAKrB,OACE,sBAAKQ,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAASC,aAAcP,KAAKH,cAC5B,0BACEW,GAAG,SACHC,SAAUT,KAAKL,aACfQ,MAAOH,KAAKX,MAAMC,gBAGtB,sBAAKgB,UAAU,WAAf,UACE,wBAAQA,UAAU,MAAlB,SACE,0CAEF,cAAC,EAAD,CAASd,SAAUQ,KAAKX,MAAMG,qB,GAjEtBkB,IAAMC,WAwElBC,E,kDACJ,WAAYxB,GAAQ,uCACZA,G,qDAIN,OACE,sBAAKkB,UAAU,UAAUO,QAASb,KAAKZ,MAAMmB,aAA7C,UACE,sBAAKD,UAAU,OAAf,UACE,mBAAGrB,MAAM,OAAOqB,UAAU,eAC1B,mBAAGrB,MAAM,SAASqB,UAAU,oBAE9B,sBAAKA,UAAU,UAAf,UACE,mBAAGrB,MAAM,YAAYqB,UAAU,eAC/B,mBAAGrB,MAAM,GAAGqB,UAAU,qBACtB,mBAAGrB,MAAM,OAAOqB,UAAU,eAC1B,mBAAGrB,MAAM,QAAQqB,UAAU,mBAE7B,sBAAKA,UAAU,QAAf,UACE,mBAAGrB,MAAM,gBAAgBqB,UAAU,kBACnC,mBAAGrB,MAAM,gBAAgBqB,UAAU,kBAErC,mBAAGA,UAAU,kB,GAtBCI,IAAMC,WA4BtBG,EAAU,SAAC1B,GACf,OACE,qBACE2B,wBAAyB,CACvBC,OAAQtC,IAAOU,EAAMI,SAAU,CAAEX,SAAUA,KAE7C2B,GAAG,aAKHjB,EAAW,qmCA6CFJ,IC/JA8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1f392a7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"./ToolBar.css\";\n\nimport marked from \"marked\";\n\nmarked.setOptions({\n  breaks: true,\n});\n\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + \"</a>\";\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorText: placeholder,\n      markdown: placeholder,\n      editorMaximized: false,\n      previewMaximized: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.markupButtons = this.markupButtons.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      editorText: e.target.value,\n      markdown: e.target.value,\n    });\n  }\n\n  markupButtons(output) {\n    return this.setState({\n      editorText: `${this.state.editorText}${output}`,\n      markdown: `${this.state.editorText}${output}`,\n    });\n  }\n\n  handleClick(e) {\n    let targetBtn = e.target.className;\n    if (targetBtn === \"fa fa-bold\") {\n      this.markupButtons(\" **Bold**\");\n    } else if (targetBtn === \"fa fa-italic\") {\n      this.markupButtons(\" _Italic_\");\n    } else if (targetBtn === \"fa fa-link\") {\n      this.markupButtons(\" [Link](https://)\");\n    } else if (targetBtn === \"fa fa-quote-left\") {\n      this.markupButtons(\"> Quote \\n\");\n    } else if (targetBtn === \"fa fa-code\") {\n      this.markupButtons(\"```Code```\");\n    } else if (targetBtn === \"fa fa-image\") {\n      this.markupButtons(\"![Alt Text](http://)\");\n    } else if (targetBtn === \"fa fa-list-ol\") {\n      this.markupButtons(\"1. List Item \\n\");\n    } else if (targetBtn === \"fa fa-list\") {\n      this.markupButtons(\"- List Item \\n\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"textField\">\n          <ToolBar clickHandler={this.handleClick} />\n          <textarea\n            id=\"editor\"\n            onChange={this.handleChange}\n            value={this.state.editorText}\n          ></textarea>\n        </div>\n        <div className=\"liveView\">\n          <header className=\"bar\">\n            <p>Preview</p>\n          </header>\n          <Preview markdown={this.state.markdown} />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ToolBar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"ToolBar\" onClick={this.props.clickHandler}>\n        <div className=\"main\">\n          <i title=\"Bold\" className=\"fa fa-bold\"></i>\n          <i title=\"Italic\" className=\"fa fa-italic\"></i>\n        </div>\n        <div className=\"usefull\">\n          <i title=\"HyperLink\" className=\"fa fa-link\"></i>\n          <i title=\"\" className=\"fa fa-quote-left\"></i>\n          <i title=\"Code\" className=\"fa fa-code\"></i>\n          <i title=\"Image\" className=\"fa fa-image\"></i>\n        </div>\n        <div className=\"lists\">\n          <i title=\"Numbered List\" className=\"fa fa-list-ol\"></i>\n          <i title=\"Bulleted List\" className=\"fa fa-list\"></i>\n        </div>\n        <i className=\"expand\"></i>\n      </div>\n    );\n  }\n}\n\nconst Preview = (props) => {\n  return (\n    <div\n      dangerouslySetInnerHTML={{\n        __html: marked(props.markdown, { renderer: renderer }),\n      }}\n      id=\"preview\"\n    />\n  );\n};\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}